/* Plugin generated by AMXX-Studio */

#include amxmisc
#include amxmodx
#include cstrike
#include engine
#include fakemeta
#include fakemeta_util
#include fun
#include hamsandwich


#define CARNAGE_ROUND 5
#define Macro(%1)  %1 *15
#define vida(%1)   (%1 * 10)
#define chaleco(%1)  (%1 * 10)
#define gravedad(%1)   (%1 * 0.05)
#define velocidad(%1)   (%1 * 5)
#define damage(%1)  (%1 *10)
#define tiempoitems(%1)  (%1 * 1)


new const Plugin[] = "Core"
new const Version[] = "beta"
new const Author[] = "Pipa Roja"

enum { OFFLINE, LOGUEADO }
enum { REGISTRAR_USUARIO, REGISTRAR_PASSWORD, LOGUEAR_USUARIO, LOGUEAR_PASSWORD, CARGAR_DATOS, GUARDAR_DATOS, CAMBIAR_PASSWORD }
enum _: DatosHab { NombreHab[40], Necesario, Maximo }
enum _:DatosShop { Nombre[36], Precio, lvl }
enum _:Data { TAG[30], FLAG, Multiplicador }
enum (+= 77) { TASK_ACEPT }
enum { NONE = -1, Master, Start_Amount }
enum _:pdata { In_Party, Position, Amount_In_Party, Block_Party, UserName[32] }
enum _:DataCallBack { MASTER, USER };

new const AdminsTags[][Data] = {
	{ "Admin Basico", ADMIN_LEVEL_E, 2 },
	{ "Admin Premium", ADMIN_LEVEL_F, 4 },
	{ "Admin Diamond", ADMIN_LEVEL_G, 6 },
	{ "Staff", ADMIN_LEVEL_H, 6 }
	
};
new const HabDatos[][DatosHab] = {
	{"Vida", 7, 15}, 						{"Chaleco", 10, 10},
	{"Velocidad", 8,5}, 					{"Gravedad", 10, 6},
	{"Danio", 12, 10},						{"-Tiempo En Plantar Laser", 6, 5},
	{"-Tiempo En Sacar Laser", 6, 5},		{"+1 Laser", 10, 4},
	{"-Tiempo En Congelacion", 7, 5},		{"+Tiempo En Congelacion", 7, 5},
	{"+Tiempo de Items", 8, 6}
};
new const ShopDatos[][DatosShop] = {
	{"Granada HE", 45000, 8},
	{"Extra SG", 80000, 23},
	{"Pasos Silenciosos(Solo TT || 15's)", 70000, 13},
	{"Velocidad ( 15's)", 130000, 35},
	{"Gravedad ( 10's)", 100000, 20},
	{"Super SG", 30000, 6},
	{"Espada", 30000, 6},
	{"Invisibilidad( 15's)", 150000, 50},
	{"Arma Aleatoria", 180000, 85},
	{"+200 HP", 142000, 64},
	{"Pack De Granadas", 120000, 70}
	// Paracaidas, DET. PROXIMIDAD TT, Disfraz, Anti SG, Laser Extra, Arma congeladora, MOLOTOV
};
new const Costo[] = {1,6,15,24,50, 60}

new const RangosUsers[][] = {
	"Rango 1",		"Rango 2",		"Rango 3",
	"Rango 4",		"Rango 5",		"Rango 6"
}
new const RangosAdmin[][] = {	
	"Rango 1",		"Rango 2",		"Rango 3",
	"Rango 4",		"Rango 5",		"Rango 6"
}


const VelocidadHab = 240
const VidaHab = 100
const ChalecoHab = 100

new Cvar_HabCarnage, cvar_time_acept, cvar_max_players, cvar_allow_bots

new Nivel[33], Frags[33], Reset[33], Plata[33], Puntos[33], ItemRonda[33], Velocidad[33], Habilidades[33][11], Rangos[33], FragsCarnage[33], Laseres[33], g_PartyData[33][pdata],
g_MenuCallback[DataCallBack], Array:Party_Ids[33], g_playername[33][33], Ham:Ham_Player_ResetMaxSpeed = Ham_Item_PreFrame, 
g_rondas, g_carnage, g_maxplayers, bool: HappyHour, MostrarHora, HudCarnage, HudHappy, HudHora, Hud

new const horas[] = { 17,18,00,01,02,03,04,05,06,07,08,09,10 };

public hns_hab_laserplantas(id) return Habilidades[id][5];
public hns_hab_lasersacas(id) return Habilidades[id][6];

public hns_frags_laser(id) {
    new frags = 1
    if(HappyHour){
        Frags[id] += frags * AdminsTags[id][Multiplicador]*  2
        Plata[id] += 500*2
       // Check(id);
    } 
    else {
        Frags[id] += frags * AdminsTags[id][Multiplicador]*  1
        Plata[id] += 500
       // Check(id)
    }
}
public hns_hab_lasermas(id)
{
    if(Habilidades[id][6] == 1) { Laseres[id] = 4
    }
    else if(Habilidades[id][7] == 2) { Laseres[id] = 5
    }
    else if(Habilidades[id][7] == 3) { Laseres[id] = 6
    }
    else if(Habilidades[id][7] == 4) { Laseres[id] = 7 
    }
    return Habilidades[id][7],Laseres[id]
}
public hns_hab_frostdescongelacion(id) return Habilidades[id][8]
public hns_hab_frostcongelacion(id) return Habilidades[id][9]

public plugin_init() {
    register_plugin(Plugin, Version, Author)
    
//cmdPrincipal(id)

    register_event("DeathMsg", "EventoM", "a")
    RegisterHam( Ham_Spawn, "player", "fw_PlayerSpawn_Post", 1)
    RegisterHam(Ham_TakeDamage, "player", "TakeDamage")
    register_event("HLTV" , "RoundStart" , "a", "1=0", "2=0")
    register_logevent("round_end", 2, "1=Round_End")
    RegisterHam(Ham_Player_ResetMaxSpeed, "player", "Ham_Player_ResetMaxSpeed_Post", true)
    
    Cvar_HabCarnage = register_cvar("carnage_habilidades", "0")
   
    cvar_time_acept = register_cvar("party_time_acept","15")
    cvar_max_players = register_cvar("party_max_players","3")
    cvar_allow_bots = register_cvar("party_allow_bots","1")
    
    g_MenuCallback[MASTER] = menu_makecallback("check_master")
    g_MenuCallback[USER] = menu_makecallback("check_user")    
    Hud = CreateHudSyncObj()
    HudHappy = CreateHudSyncObj()
    HudCarnage = CreateHudSyncObj()
    HudHora = CreateHudSyncObj()
    g_maxplayers = get_maxplayers()
    g_rondas = 0
}

public plugin_natives()
{
    register_native("hns_hab_laserplantas", "hns_hab_laserplantas", 1)
    register_native("hns_hab_lasersacas", "hns_hab_lasersacas", 1)
    register_native("hns_frags_laser", "hns_frags_laser", 1)
    register_native("hns_hab_lasermas", "hns_hab_lasermas", 1)
    register_native("hns_hab_frostdescongelacion", "hns_hab_frostdescongelacion", 1)
    register_native("hns_hab_frostcongelacion", "hns_hab_frostcongelacion", 1)
}
public plugin_cfg(){
    for(new i = 1; i <= g_maxplayers; i++)
        Party_Ids[i] = ArrayCreate(1, 1)
}
public client_putinserver(id)
{
    Nivel[id] = 1
    Frags[id] = 0
    Reset[id] = 0
    Plata[id] = 0
    Puntos[id] = 0
    FragsCarnage[id] = 0
    ItemRonda[id] = 0
    Laseres[id] = 3
    MostrarHora = true
   // remover_item(id)
  //  check_rango(id)
    set_task(1.0,"ShowHud", id+570, _,_,"b")
    //show_login_menu(id)
    
}
public client_disconnected(id) {
    remove_task(id+570)
    if(g_PartyData[id][In_Party])
    g_PartyData[id][Position] ? g_PartyData[id][Amount_In_Party] == 2 ? destoy_party(id) : remove_party_user(id) : destoy_party(id)    
    g_PartyData[id][UserName][0] = 0
    g_PartyData[id][Block_Party] = false
}

public client_infochanged( id ) {
    
    static nam[ 33 ];
    get_user_info( id, "name", nam, charsmax( nam ) );
    
    if( !equal( g_playername[ id ], nam ) ) {
        set_user_info( id, "name", g_playername[ id ] );
        
        return PLUGIN_HANDLED;
    }
    
    return PLUGIN_CONTINUE;
}
public plugin_precache() {
    register_forward(FM_PlayerPreThink, "fw_PlayerPreThink")
}

public fw_PlayerPreThink(id)
{
    if (!is_user_alive(id))
        return;

    if (Velocidad[id])
        set_pev(id, pev_maxspeed, 350.0)
}
public ShowHud(id) {
    id -= 570
    
    new nombre[32];get_user_name(id, nombre, charsmax(nombre))
    new Hora[9];get_time("%H:%M:%S",Hora,8) 
    
    if(!is_user_alive(id))
    return 
    
    if(is_user_alive(id)) {
		set_hudmessage(255, 255, 255, 0.0, 0.12, 0, 6.0, 1.1, 0.0, 0.0, -1)
		ShowSyncHudMsg(id, Hud, "  Cuenta: %s^n  Nivel: %d | Reset: %d^n  Clase: %s ^n  Frags: %d (+ %d Carnage Frags)^n  Happy Hour: %s^n  Vida: %d^n  Puntos: %d^n  Dinero:%d", 
		nombre, Nivel[id], Reset[id], is_user_admin(id)? RangosAdmin[Rangos[id]] : RangosUsers[Rangos[id]], Frags[id], FragsCarnage[id], HappyHour ? "ON | Frags x2" : "OFF", get_user_health(id), Puntos[id], Plata[id])
    }        
    if(HappyHour) {
        set_hudmessage(0, 85, 255, 0.03, 0.02, 0, 6.0, 12.0)
        ShowSyncHudMsg(id, HudHappy, "Estas Jugando La HappyHours: Ganas el Doble de Frags y Dinero")
    }
    if(MostrarHora){
        set_hudmessage(212, 255, 212, 0.65, 0.05, 0, 6.0, 12.0)
        ShowSyncHudMsg(id,HudHora,"La Hora Es:^n[ %s ]",Hora)
    }

    if(g_carnage){
        set_hudmessage(0, 120, 220, -1.0, 0.06, 1, 1.0, 1.0, 1.0, 1.0)
        ShowSyncHudMsg(id, HudCarnage, "Comenzo la Ronda Carnage!")
    }
    else {
        set_hudmessage(0, 120, 220, -1.0, 0.06, 1, 1.0, 1.0, 1.0, 1.0)
        ShowSyncHudMsg(id, HudCarnage, "Para la Ronda Carnage: falta%s %d ronda%s.", 
        CARNAGE_ROUND - g_rondas > 1 ? "n" : "", CARNAGE_ROUND - g_rondas, CARNAGE_ROUND - g_rondas > 1 ? "s" : "")
    }
}
public remover_item(id)
{
    set_user_footsteps(id, 0)
    set_pev(id, pev_gravity, 1.0)
    Velocidad[id] = false
    set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 250)
    set_user_godmode(id, 0)
}
public fw_PlayerSpawn_Post(id)
{
    if(!is_user_alive(id) || cs_get_user_team(id))
    return
    
    ItemRonda[id] = 0
    remover_item(id)
    set_task(1.0, "check_carnage", id)
    if(g_carnage || get_pcvar_num(Cvar_HabCarnage))
    {    
        set_user_health(id, VidaHab + vida(Habilidades[id][0]))
        cs_set_user_armor(id, ChalecoHab + chaleco(Habilidades[id][1]), CS_ARMOR_KEVLAR) 
        set_user_gravity(id, get_user_gravity(id) - gravedad(Habilidades[id][3]))
    }
    
    if(cs_get_user_team(id) == CS_TEAM_T)
    {
        strip_user_weapons(id)
        give_item(id,"weapon_hegrenade")
        give_item(id,"weapon_flashbang")
        give_item(id,"weapon_flashbang")
        give_item(id,"weapon_smokegrenade")
    } 
    else if(cs_get_user_team(id) == CS_TEAM_CT) 
    {
        strip_user_weapons(id)
        give_item(id,"weapon_knife")
    }
}
public TakeDamage(victim, attacker,inflictor, Float:damage, damage_type)
{

    if (victim == attacker || ! is_user_connected(attacker)) 
    return
    
    if (g_carnage || get_pcvar_num(Cvar_HabCarnage))
         {
         
    damage += (damage(Habilidades[attacker][4]))
    
    if (damage > 0.0) SetHamParamFloat(4, damage)
         }
}
public Ham_Player_ResetMaxSpeed_Post(id) 
{
    if (!is_user_alive(id)) 
    return
    
    if(g_carnage || get_pcvar_num(Cvar_HabCarnage))
    {
        set_user_maxspeed(id, float(VelocidadHab) + float(velocidad(Habilidades[id][2])))
    }
}
public RoundStart()
{
    new data[12] 
    get_time("%H", data, 12) 
    new Tiempo = str_to_num(data) 
    
    for(new i=0;i <= sizeof horas - 1;i++) 
    {     
        if(Tiempo != horas[i]) continue 
        HappyHour = true 
        break; 
    }
    
    g_rondas++
    g_carnage = 0    
    if (g_rondas == CARNAGE_ROUND)
    {
        
        g_rondas = 0
        g_carnage = 1
        set_cvar_num("hns_hidetime", 0)
        set_cvar_num("hns_hiders_knife", 2)
        set_cvar_num("hns_hiders_flashbangs", 0)
        set_cvar_num("hns_hiders_smokegren", 0)
    }
}
public round_end()
{
    if (g_carnage) {
        set_cvar_num("hns_hidetime", 10)
        set_cvar_num("hns_hiders_knife", 1)
        set_cvar_num("hns_hiders_flashbangs", 2)
        set_cvar_num("hns_hiders_smokegren", 1)
    }
    if (!EquipoTTAlive())
    {
        set_task(0.5, "taskChangeTeam")
    }
}
public taskChangeTeam()
{
    static id, CsTeams:Teams
    
    for (id = 1; id <= g_maxplayers; id++)
    {
        if (!is_user_connected(id))
            continue;
        
        Teams = cs_get_user_team(id)
        
        switch (Teams)
        {
            case CS_TEAM_T: cs_set_user_team(id, CS_TEAM_CT)
            case CS_TEAM_CT: cs_set_user_team(id, CS_TEAM_T)
            
        }
    }
}
public EventoM()
{
    new attacker = read_data(1)
    new victim = read_data(2)
    new Player[32], usuarios;get_party_index(attacker, Player)
    
    if(!is_user_connected(attacker) || is_user_connected(victim) && attacker == victim)
    return;
    
    new frags = 1
    
    if(HappyHour){
        if(g_PartyData[attacker][Amount_In_Party]) {
            for(new i = 0; i < g_PartyData[attacker][Amount_In_Party]; i++)
            {
                
                usuarios = Player[i]
                Frags[usuarios] += frags * AdminsTags[i][Multiplicador]*2
                Plata[attacker] += 500*2
                Check(usuarios)
                Check(i)
            } 
        }
        else if(g_carnage){
            FragsCarnage[attacker] += 2
            CheckCarnage(attacker)
        }
        else {
            
            Frags[attacker] += frags * AdminsTags[attacker][Multiplicador]*2
            Plata[attacker] += 500*2
            Check(attacker)
        }
    }
    else {
        if(g_PartyData[attacker][Amount_In_Party]) {
            for(new i = 0; i < g_PartyData[attacker][Amount_In_Party]; i++)
            {
                
                usuarios = Player[i]
                Frags[usuarios] += frags * AdminsTags[i][Multiplicador]
                Plata[attacker] += 500
                Check(usuarios)
                Check(i)
            } 
        }
        else if(g_carnage){
            FragsCarnage[attacker] += 1
            CheckCarnage(attacker)
        }
        else { 
            
            Frags[attacker] += frags * AdminsTags[attacker][Multiplicador]
            Plata[attacker] += 500
            Check(attacker)
        }
    }
}
Check(id)
{
    if(Frags[id] >= Macro(Nivel[id]))
    {
        Frags[id] = 0
        Nivel[id]++
        check_rango(id)

    }
}
CheckCarnage(id)
{
    if(FragsCarnage[id] >= 10)
    {
        Puntos[id]++
    }
}
public check_rango(id)
{
    if(Nivel[id] >= Costo[Rangos[id]])
    {
        Rangos[id]++
    }
}
public check_carnage(id)
{
    if (!g_carnage)
    return
    
    switch(random_num(1,4))
    {
        case 1:
        {
        set_hudmessage(255, 42, 42, 0.26, 0.1, 0, 6.0, 12.0)
        show_hudmessage(id, "Carnage AWP")
        
        set_user_health(id, 100)
        strip_user_weapons(id)
        Dar_arma(id,"weapon_knife", CSW_KNIFE, 1)
        Dar_arma(id,"weapon_awp", CSW_AWP, 30)
    }
    case 2:
    {
        set_hudmessage(255, 42, 42, 0.26, 0.1, 0, 6.0, 12.0)
        show_hudmessage(id, "Carnage HEADSHOT")
        
        set_user_health(id, 100)
        strip_user_weapons(id)
        set_user_hitzones(id,0,2)
        Dar_arma(id,"weapon_deagle", CSW_DEAGLE, 100)
    }
    case 3:
    {
        set_hudmessage(255, 42, 42, 0.26, 0.1, 0, 6.0, 12.0)
        show_hudmessage(id, "Carnage CUCHI")
        
        set_user_health(id, 100)
        strip_user_weapons(id)
        Dar_arma(id,"weapon_knife", CSW_KNIFE, 1)
    }
    case 4:
    {
        set_hudmessage(255, 42, 42, 0.26, 0.1, 0, 6.0, 12.0)
        show_hudmessage(id, "Carnage M3")
        
        set_user_health(id, 100)
        strip_user_weapons(id)
        Dar_arma(id,"weapon_knife", CSW_KNIFE, 1)
        Dar_arma(id,"weapon_m3,", CSW_M3, 100)
    }
    }
}
public cmdPrincipal(id) { 
	
	if(!(get_user_team(id) == 1 || get_user_team(id) == 2 ))
		return PLUGIN_HANDLED;
		
	new Hora[9], Texto[100], menu
	get_time("%H:%M", Hora, 8)
	
	formatex(Texto, charsmax(Texto), "\yMenu Principal \d-\y Hora: %s", Hora)
	menu = menu_create(Texto, "resp_principal") 

	menu_additem(menu, "\wComprar  \rExtra Items", "0");
	menu_additem(menu, "\wResetear Cuenta", "1");
	menu_additem(menu, "\wHabilidades", "2");
	menu_additem(menu, "\wParty", "3");
	menu_additem(menu, "\wLista de niveles", "4");
	
	menu_setprop(menu, MPROP_EXITNAME, "Salir del menu")
	menu_display(id, menu, 0);
	return PLUGIN_HANDLED;
}
public resp_principal(id, menu, item) {
	
	if(item == MENU_EXIT){
		menu_destroy(menu)       
		return PLUGIN_HANDLED;   
	}
	
	switch(item)   
	{
		case 0: TiendaMenu(id)
		case 1: cmdReset(id)
		case 2: HabMenu(id)
		case 3: cmdParty(id)
		case 4: ListaNiveles(id)
	}
	return PLUGIN_HANDLED; 
} 

public cmdReset(id) {
	new menu4 = menu_create("\yObten +1 reset de Nivelamento^n^n\wNivel Requerido: \r30^n\r->\d^n#Que esperas? sube de nivel y canjea tu reset YA!", "menu_reset")
	
	if (Nivel[id] >= 30)
		menu_additem(menu4, "\wResetear personaje", "1")
	else
		menu_additem(menu4, "\dResetear personaje  \r[Nivel insuficiente]", "1")
		
	menu_setprop(menu4, MPROP_EXITNAME, "\wSalir del menu")
	menu_display(id, menu4, 0)
}
public menu_reset(id, menu4, item) {
	if(item == MENU_EXIT) {
		menu_destroy(menu4)       
		return PLUGIN_HANDLED;   
	}
	
	if (Nivel[id] < 30 || Reset[id] >= 10) {
		cmdReset(id)
		return PLUGIN_HANDLED;
	} 
	if (Nivel[id] >= 30) {
		Nivel[id] = 1
		Frags[id] = 0
		Reset[id]++
		Plata[id] += 30000
		chatcolor(id, "!g[HNS]!y Has reseteado,  tu nivel !g%d!y tu!g Reset %d", Nivel[id], Reset[id])
		cmdReset(id)
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_HANDLED;
}
public TiendaMenu(id) {
	
    new menu, Texto[200]
    if(g_carnage) {
        chatcolor(id, "!g[HNS]!y No puedes abrir la tienda en carnage")
        return PLUGIN_HANDLED
    }  
    if(!is_user_alive(id)) {
		chatcolor(id, "!g[HNS]!y Necesitas Estar Vivo Para Abrir La Tienda")
		return PLUGIN_HANDLED
    }
    
    formatex(Texto,charsmax(Texto),"\wTienda \y%s ^nPlata: \r[\y %d \r]", Plugin, Plata[id])
    menu = menu_create(Texto,"HandlerTienda")
    
    for(new i = 0;i < sizeof(ShopDatos); i++)
    {
        formatex(Texto,charsmax(Texto),"\w%s\r||\wCosto \y%d\r||\wLvl\y%d ", ShopDatos[i][Nombre],ShopDatos[i][Precio],ShopDatos[i][lvl])
        menu_additem(menu, Texto)
    }
    menu_display(id, menu , 0)
    menu_setprop(menu, MPROP_BACKNAME, "Anterior")
    menu_setprop(menu, MPROP_NEXTNAME, "Siguiente")
    menu_setprop(menu, MPROP_EXITNAME, "Salir del Menu")
    return PLUGIN_HANDLED
}
public HandlerTienda(id, menu, item)
{
	if(item == MENU_EXIT)
		return PLUGIN_HANDLED
	
	if(Plata[id] < ShopDatos[item][Precio])
	{
		chatcolor(id, "!g[HNS]!y No Tenes Plata Suficiente para Comprar %s", ShopDatos[item][Nombre])
		return PLUGIN_HANDLED
	}
	if(Nivel[id] < ShopDatos[item][lvl])
	{
		chatcolor(id, "!g[HNS]!y No Tenes Nivel Suficiente Para Comprar %s", ShopDatos[item][Nombre])
		return PLUGIN_HANDLED
	}
	if(ItemRonda[id] >= 1)
	{
		chatcolor(id, "!g[HNS]!y  Solo Puedes Comprar 1 Ves Por Ronda" )
		return PLUGIN_HANDLED
	}
	switch(item)
	{
		case 0: Dar_arma(id, "weapon_hegrenade", CSW_HEGRENADE, 1)
			case 1: Dar_arma(id, "weapon_smokegrenade", CSW_SMOKEGRENADE, 1)
			case 2: {
			if(cs_get_user_team(id) == CS_TEAM_T) {
				set_user_footsteps(id, 1)
				set_task(15.0 + tiempoitems(Habilidades[id][10]),"remover_item", id)
			}
			else {
				chatcolor(id, "!g[HNS]!y Necesitas Ser Terrorista Para Comprar Este Item" )
				return PLUGIN_HANDLED
			}
		}
		case 3: {
			Velocidad[id] = true
			set_task(15.0 + tiempoitems(Habilidades[id][10]), "remove_item", id)
		}
		case 4: {
			set_pev(id, pev_gravity, 0.1)
			set_task(10.0 + tiempoitems(Habilidades[id][10]), "remover_item", id)
		}
		case 5: Dar_arma(id, "weapon_smokegrenade", CSW_SMOKEGRENADE, 1)
		case 6: Dar_arma(id, "weapon_knife", CSW_KNIFE, 1)
		case 7: {
			set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 10)
			set_task(15.0 + tiempoitems(Habilidades[id][10]),"remove_item", id)
		}	
		case 8: {
			switch(random_num(0 , 4))
			{
				case 0: Dar_arma(id, "weapon_usp", CSW_USP, 5)
				case 1: Dar_arma(id, "weapon_ak47", CSW_AK47, 4)
				case 2: Dar_arma(id, "weapon_m4a1", CSW_M4A1, 5)
				case 3: Dar_arma(id, "weapon_deagle", CSW_DEAGLE, 2)
				case 4: Dar_arma(id, "weapon_awp", CSW_AWP, 3)
			}
		}
		case 9: set_user_health(id, get_user_health(id) + 200)
		case 10: {
			Dar_arma(id, "weapon_hegrenade", CSW_HEGRENADE, 1)
			Dar_arma(id, "weapon_flashbang", CSW_FLASHBANG, 2)
			Dar_arma(id, "weapon_smokegrenade", CSW_SMOKEGRENADE, 1)
		}
	}
	Plata[id] -= ShopDatos[item][Precio]
	ItemRonda[id]++
	chatcolor(id, "!g[HNS]!y Compraste %s", ShopDatos[item][Nombre])
	return PLUGIN_HANDLED
}
public HabMenu(id)
{
    new menu,Texto[150]
    
    if(g_carnage)
    {
        chatcolor(id, "!g[HNS]!y No Puedes Abir El Menu de Habilidades en Carnage" )
        return PLUGIN_HANDLED
    }
    
    if(!is_user_alive(id))
    {
        chatcolor(id, "!g[HNS]!y Necesitas Estar Vivo Para Mejorar Tus Habilidades" )
        return PLUGIN_HANDLED
    }    
    
    formatex(Texto,charsmax(Texto),"\wHabilidades \y%s ^n\wPuntos: \r[\y %d \r]",Plugin,Puntos[id])
    menu = menu_create(Texto,"HandlerHabilidades")
    
    for(new i = 0;i < sizeof(HabDatos); i++)
    {
        if(Habilidades[id][i] < HabDatos[i][Maximo])
        formatex(Texto,charsmax(Texto),"\w%s \r|| \wP.Necesarios: \r[\y %d \r]",HabDatos[i][NombreHab],HabDatos[i][Necesario])
        
        else
        formatex(Texto,charsmax(Texto),"\w%s \r|| \wMejorada Al Maximo",HabDatos[i][NombreHab])
        
        menu_additem(menu,Texto)
    }
    menu_display(id, menu, 0)
    menu_setprop(menu, MPROP_EXIT, MEXIT_ALL)
    return PLUGIN_HANDLED
}
public HandlerHabilidades(id, menu, item)
{
    if(item == MENU_EXIT)
    return PLUGIN_HANDLED
    
    if(Puntos[id] < HabDatos[item][Necesario])
    {
        chatcolor(id, "!g[HNS]!y No Tenes Puntos Necesarios Para Mejorar esta Habilidad" )
        return PLUGIN_HANDLED
    }
    if(Habilidades[id][item] >= HabDatos[item][Maximo])
    {
        chatcolor(id, "!g[HNS]!y Ya Mejoraste Al Maximo Esta Habilidad" )
        return PLUGIN_HANDLED
    }
    
    Habilidades[id][item]++
    Puntos[id] -= HabDatos[item][Necesario]
    chatcolor(id, "!g[HNS]!y Mejoraste la Habilidad %s", HabDatos[item][NombreHab])
    return PLUGIN_HANDLED
}
public cmdParty(id) {
    
    if(g_PartyData[id][In_Party])
        show_party_info_menu(id)
    else
        show_party_menu(id)
    
    return PLUGIN_HANDLED
}

public show_party_menu(id) {
    
    new iMenu = menu_create("\rMenu Party:","party_menu"), BlockParty[50]
    
    menu_additem(iMenu, "\yCrear Party", "0")
    
    formatex(BlockParty, charsmax(BlockParty), "\yBloquear Invitaciones De Party: \w%s",g_PartyData[id][Block_Party] ? "Si" : "No")
    
    menu_additem(iMenu, BlockParty, "1")
    
    menu_setprop(iMenu, MPROP_EXITNAME, "Salir")
    menu_setprop(iMenu, MPROP_EXIT, MEXIT_ALL)
    
    menu_display(id, iMenu, 0)
}

public show_party_info_menu(id) {
    
    new iMenu = menu_create("\rMenu Party:","party_info_menu")
    
    menu_additem(iMenu, "Agregar Integrante", .callback = g_MenuCallback[MASTER])
    menu_additem(iMenu, "Expulsar Integrande", .callback = g_MenuCallback[MASTER])
    menu_additem(iMenu, "Destruir Party", .callback = g_MenuCallback[MASTER])
    menu_additem(iMenu, "Salir del Party", .callback = g_MenuCallback[USER])
    
    menu_setprop(iMenu, MPROP_EXITNAME, "Salir")
    menu_setprop(iMenu, MPROP_EXIT, MEXIT_ALL)
    
    menu_display(id, iMenu)
}

public show_party_add_menu(id) {
    
    new iMenu = menu_create(g_PartyData[id][In_Party] ? "\rAgregar Integrante:" : "\rCrear Party:", "party_create_menu"), Poss[3], Name[32]
    
    for(new i = 1; i <= g_maxplayers; i++) {
        
        if(!is_available_to_party(i) || id == i)
            continue;
            
        get_user_name(i, Name, charsmax(Name))
        num_to_str(i, Poss, charsmax(Poss))
        menu_additem(iMenu, Name, Poss)
    }
    
    menu_setprop(iMenu, MPROP_EXITNAME, "Salir")
    menu_setprop(iMenu, MPROP_EXIT, MEXIT_ALL)
    
    menu_display(id, iMenu)
}

public show_party_kick_menu(id) {
    
    new iMenu = menu_create("\rKick Party Menu:","party_kick_menu"), Players[32], Poss[3], user
    
    get_party_index(id, Players)
    
    for(new i; i < g_PartyData[id][Amount_In_Party]; i++) {
        user = Players[i]
        num_to_str(user, Poss, charsmax(Poss))
        menu_additem(iMenu, g_PartyData[user][UserName], Poss)
    }
    
    menu_setprop(iMenu, MPROP_EXITNAME, "Salir")
    
    menu_display(id, iMenu)
}

public show_party_invite_menu(id2, MasterId) {
    
    new MenuTitle[128], iMenu, Str_MasterId[3]
    
    set_player_party_name(MasterId)
    set_player_party_name(id2)
    
    chatcolor(id2, "!g[HNS]!y Solicitud enviada a %s", g_PartyData[id2][UserName])
    
    formatex(MenuTitle, charsmax(MenuTitle), "%s te mando una invitacion para %s Party", g_PartyData[MasterId][UserName], g_PartyData[MasterId][In_Party] ? "unirte al" : "crear un")
    
    new UserTaskArgs[3]
    
    UserTaskArgs[0] = iMenu = menu_create( MenuTitle , "party_invite_menu")
    UserTaskArgs[1] = MasterId
    
    num_to_str(MasterId, Str_MasterId, charsmax(Str_MasterId))
    
    menu_additem( iMenu , "Aceptar", Str_MasterId)
    menu_additem( iMenu , "Rechazar", Str_MasterId)
    
    if(is_user_bot(id2) && get_pcvar_num(cvar_allow_bots)) {
        party_invite_menu(id2, iMenu, 0)
        return
    }
    
    menu_setprop(iMenu, MPROP_EXIT, MEXIT_NEVER)
    
    menu_display(id2, iMenu)
    
    remove_task_acept(id2)
    
    set_task(get_pcvar_float(cvar_time_acept), "Time_Acept", id2+TASK_ACEPT, UserTaskArgs, 2)
}
    

public party_menu(id, menu, item) {
    
    if(item == MENU_EXIT) {
        menu_destroy(menu)
        return
    }
    
    if(item) {
        g_PartyData[id][Block_Party] = g_PartyData[id][Block_Party] ? false : true
        show_party_menu(id)
    }
    else
        show_party_add_menu(id)
    
    menu_destroy(menu)
    
}

public party_create_menu(id, menu, item) {
    
    if(item == MENU_EXIT) {
        menu_destroy(menu)
        return
    }
    
    new iKey[6], iAccess, iCallback, id2
    
    menu_item_getinfo(menu, item, iAccess, iKey, charsmax(iKey), _, _, iCallback)
    
    id2 = str_to_num(iKey)
    
    if(!is_available_to_party(id2))
        return
    
    show_party_invite_menu(id2, id)
    
    menu_destroy(menu)
}
public party_invite_menu(id, menu, item) {
	
	if(item == MENU_EXIT) {
		menu_destroy(menu)
		remove_task_acept(id)
		return
	}
	
	new iKey[6], iAccess, iCallback, id_master
	
	menu_item_getinfo(menu, item, iAccess, iKey, charsmax(iKey), _, _, iCallback)
	
	id_master = str_to_num(iKey)
	
	switch(item) {
		case 0: {
			
			if(!g_PartyData[id_master][In_Party]) {
				create_party(id_master, id)
				set_task_party_hud(id_master)
				set_task_party_hud(id)
			}
			else {
				if(g_PartyData[id_master][Amount_In_Party] == get_pcvar_num(cvar_max_players)) {
					
					chatcolor(id, "!g[HNS]!y Ya se alcanzo el numero maximo de integrantes en la party" )
					chatcolor(id_master, "!g[HNS]!y Ya alcanzaste el numero maximo de integrantes en la party" )
					
					remove_task_acept(id)
					
					menu_destroy(menu)
					return
				}
				
				add_party_user(id_master, id)
				set_task_party_hud(id)
			}
			
			chatcolor(id, "!g[HNS]!y %s fue agregado al Party",  g_PartyData[id][UserName])
		}
		case 1:chatcolor(id_master, "!g[HNS]!y %s cancelo la invitacion de Party",  g_PartyData[id][UserName])
		}
	
	remove_task_acept(id)
	
	menu_destroy(menu)
}

public party_kick_menu(id, menu, item) {
    
    if(item == MENU_EXIT) {
        menu_destroy(menu)
        return
    }
    
    new iKey[6], iAccess, iCallback, id2
    
    menu_item_getinfo(menu, item, iAccess, iKey, charsmax(iKey), _, _, iCallback)
    
    id2 = str_to_num(iKey)
    
    if(is_user_connected(id2))
        g_PartyData[id][Amount_In_Party] == 2 ? destoy_party(id) : remove_party_user(id2)
    
    menu_destroy(menu)
}

public party_info_menu(id, menu,item) {
    
    if(item == MENU_EXIT) {
        menu_destroy(menu)
        return
    }
    
    switch(item) {
        case 0: {
            if(g_PartyData[id][Amount_In_Party] < get_pcvar_num(cvar_max_players))
                show_party_add_menu(id)
            else chatcolor(id,  "Ya alcanzaste el numero maximo de integrantes en la party")
        }
        case 1: show_party_kick_menu(id)
        case 2: destoy_party(id)
        case 3: remove_party_user(id)
    }
    
    menu_destroy(menu)
}

public PartyHud(taskid) {
    
    static id
    id = 570
    
    if(!is_user_connected(id)) {
        remove_task(id+570)
        return
    }
    
    static CountParty, PartyMsg[256], Players[32], id2
    
    CountParty = 0
    PartyMsg[0] = 0

    get_party_index(id, Players)
    for(new i; i < g_PartyData[id][Amount_In_Party]; i++) {
        
        id2 = Players[i]
        
        if(CountParty)
            add(PartyMsg, charsmax(PartyMsg), "^n")
        
        format(PartyMsg, charsmax(PartyMsg), "%s%s", strlen(PartyMsg) ? PartyMsg : "Miembros del Party^n", g_PartyData[id2][UserName])
        CountParty++
    }
        
    set_hudmessage(85, 255, 212, 0.5, 0.25, 0, 6.0, 12.0)
    show_hudmessage(id, PartyMsg)
}

public Time_Acept(UserTaskArgs[], taskid) {
    
    taskid -= TASK_ACEPT;
    
    if(!g_PartyData[taskid][In_Party]) {
      
        chatcolor(UserTaskArgs[1], "!g[HNS]!y  %s cancelo la invitacion de party",  g_PartyData[taskid][UserName])
        menu_destroy(UserTaskArgs[0])
        show_menu(taskid, 0, "^n", 1)
    }
}
public check_master(id)
    return g_PartyData[id][Position] ? ITEM_DISABLED : ITEM_ENABLED
    
public check_user(id)
    return g_PartyData[id][Position] ? ITEM_ENABLED : ITEM_DISABLED

public ListaNiveles(id)
{
    new menu,niveles[50], Posicion[10]
    formatex(niveles,charsmax(niveles),"\wLista de \rNiveles \y%s", Plugin)
    menu = menu_create(niveles,"HandlerNiveles")
    
    for(new i = 1; i < 251 + 1; i++)
    {
        formatex(niveles, charsmax(niveles), "\wNivel %d \d|%s Frags: %d", i, Nivel[id] >= i ? "\y" : "\r", Macro(i))
        num_to_str(i, Posicion, charsmax(Posicion))
        menu_additem(menu, niveles, Posicion)
    }
    menu_setprop(menu, MPROP_BACKNAME, "Anterior")
    menu_setprop(menu, MPROP_NEXTNAME, "Siguiente")
    menu_setprop(menu, MPROP_EXITNAME, "Salir del Menu")
    
    menu_display(id, menu, 0)
}    
public HandlerNiveles(id, menu, item)
{
    if(item == MENU_EXIT)
    return PLUGIN_HANDLED
    
    return PLUGIN_HANDLED
}
        
stock Dar_arma(id, const weapon[], CSW, balas)
{
    static ent
    
    ent = give_item(id, weapon)
    
    if(ent <= 0)
        ent = find_ent_by_owner(id, weapon, id)
    
    cs_set_weapon_ammo(ent, balas)
    cs_set_user_bpammo(id, CSW, 0)
}
stock create_party(master, guest) {
    
    set_party_member(master, master)
    set_party_member(master, guest)
    set_party_member(guest, master)
    set_party_member(guest, guest)
    
    set_party_vars(master, Start_Amount)
    set_party_vars(guest, ++g_PartyData[master][Amount_In_Party])
}

stock add_party_user(master, guest) {
    
    new Players[32], member, amount = g_PartyData[master][Amount_In_Party]
        
    get_party_index(master, Players)
    
    for(new i; i < amount; i++) {
        
        member = Players[i]
        
        set_party_member(guest, member)
        set_party_member(member, guest)
        g_PartyData[member][Amount_In_Party]++
        
    }
    
    set_party_member(guest, guest)
    set_party_vars(guest, amount+1)    
}

stock set_party_member(id, id2)
    ArrayPushCell(Party_Ids[id], id2)

stock set_party_vars(id, amount) {
    
    g_PartyData[id][In_Party] = true
    g_PartyData[id][Position] = amount-1
    g_PartyData[id][Amount_In_Party] = amount
    
}

stock destoy_party(id) {
    
    new Players[32], id2, Amount = g_PartyData[id][Amount_In_Party]
    get_party_index(id, Players)
    
    for(new i; i < Amount; i++) {
        id2 = Players[i]
        clear_party_user(id2)
        chatcolor(id2, " La party fue destruida")
        
    }
}
stock remove_party_user(user) {
	
	new Players[32], id, Amount = g_PartyData[user][Amount_In_Party]
	
	get_party_index(user, Players)
	
	clear_party_user(user)
	
	for(new i; i < Amount; i++) {
		
		id = Players[i]
		
		if(id != user) {
			
			ArrayClear(Party_Ids[id])
			
			for(new z; z < Amount; z++)                    
				if(Players[z] != user)
				set_party_member(id, Players[z])
			
			g_PartyData[id][Position] = i
			g_PartyData[id][Amount_In_Party] = Amount-1
			chatcolor(id, "%s salio del party", g_PartyData[user][UserName])
		}
	}
}

stock clear_party_user(id) {
    
    ArrayClear(Party_Ids[id])
    g_PartyData[id][In_Party] = false
    g_PartyData[id][Position] = NONE
    g_PartyData[id][Amount_In_Party] = NONE
    remove_task_party_hud(id)
    
}

stock set_task_party_hud(id)
    set_task(1.0, "PartyHud", id+570, _, _, "b")
    
stock remove_task_party_hud(id)
    remove_task(id+570)

stock remove_task_acept(id)
    if(task_exists(id+TASK_ACEPT))
        remove_task(id+TASK_ACEPT)
    

stock set_player_party_name(id) {
    
    if(g_PartyData[id][UserName][0])
        return 0
    
    get_user_name(id, g_PartyData[id][UserName], charsmax(g_PartyData[][UserName]))
    
    return 1
}

stock is_available_to_party(id) {
    
    if(!is_user_connected(id) || g_PartyData[id][In_Party] || g_PartyData[id][Block_Party])
        return false
    
    return true
}        
    
stock get_party_index(id, players[]) {
    
    for(new i; i < g_PartyData[id][Amount_In_Party]; i++)
        players[i] = ArrayGetCell(Party_Ids[id], i)
    
    return players[0] ? 1 : 0
}
EquipoTTAlive()
{
    static id, Terrors
    Terrors = 0
    
    for (id = 1; id <= g_maxplayers; id++)
    {
        if (!is_user_connected(id) || cs_get_user_team(id) != CS_TEAM_T)
            continue
            
        if (is_user_alive(id))
        {
            Terrors++
        }
    }
    
    return 1
} 
stock chatcolor(id, const input[], any:...)
{
    static szMsg[191], msgSayText;
    
    if (!msgSayText)
        msgSayText = get_user_msgid("SayText");
    
    vformat(szMsg, 190, input, 3);

    replace_all(szMsg, 190, "!g", "^4");
    replace_all(szMsg, 190, "!y", "^1");
    replace_all(szMsg, 190, "!t", "^3");
    
    message_begin(id ? MSG_ONE_UNRELIABLE : MSG_BROADCAST, msgSayText, .player = id);
    write_byte(id ? id : 33);
    write_string(szMsg);
    message_end();
} 
