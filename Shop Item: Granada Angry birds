#include <amxmodx>
#include <fakemeta>
#include <fakemeta_util>
#include <hamsandwich>
#include <fun>
#include <cstrike>
#include <engine>
#include <hns>

new v_model[]    = "models/evg/v_heangry.mdl" 
new p_model[]    = "models/p_hegrenade.mdl" 
new w_model[]    = "models/w_hegrenade.mdl"

new bool:g_abird[33]

const NADE_TYPE_ABIRD = 7243

new g_trailSpr

//new const sound_beep[] = "abird_beep.wav"

#define reward 500

new g_exploSpr, g_ExpSpr
native shop_add_item_menu(szTitle[], szForward[], iPrecio);
//Grenade bounce sounds
new const g_bouncelist[3][64] =
{
    "weapons/grenade_hit1.wav",
    "weapons/grenade_hit2.wav",
    "weapons/grenade_hit3.wav"
}

new const g_bounce2[64] = "weapons/he_bounce-1.wav"

new const sound_bounce[] = "angrybirds_bounce1.wav"
new const sound_bounce2[] = "angrybirds_bounce2.wav"


public plugin_init()
{
    register_plugin("Granada Angry Birds", "1.0", "xLeonnn modf. zsirca")
    
    RegisterHam(Ham_Think, "grenade", "fw_ThinkGrenade")
    
    register_event("CurWeapon", "Event_CurWeapon", "be","1=1")
    register_forward(FM_SetModel, "fw_SetModel")
    register_forward(FM_EmitSound,"fw_EmitSound")
    
    shop_add_item_menu("Granada Angry Birds", "clcmd_buybomb", 80);
    
    register_message(get_user_msgid("SendAudio"),     "message_SendAudio")
    register_message(get_user_msgid("TextMsg"), "msg_text")
    
}

public plugin_precache()
{
    g_trailSpr     = engfunc(EngFunc_PrecacheModel, "sprites/laserbeam.spr")
    g_exploSpr     = engfunc(EngFunc_PrecacheModel, "sprites/shockwave.spr")
    g_ExpSpr     = engfunc(EngFunc_PrecacheModel, "sprites/zerogxplode.spr")
    
    precache_model(v_model)
    precache_model(p_model)
    precache_model(w_model)
    
   // precache_sound(sound_beep)
    //precache_sound(sound_bounce)
  //  precache_sound(sound_bounce2)
}

public message_SendAudio()
{
    if(get_msg_args() != 3 || get_msg_argtype(2) != ARG_STRING) { 
        return PLUGIN_CONTINUE 
    }

    new arg2[20] 
    get_msg_arg_string(2, arg2, 19) 
    if(equal(arg2[1], "!MRAD_FIREINHOLE")) 
    { 
        return PLUGIN_HANDLED 
    } 
    return PLUGIN_CONTINUE 
}
public msg_text()
{
    if(get_msg_args() != 5 || get_msg_argtype(3) != ARG_STRING || get_msg_argtype(5) != ARG_STRING) {
        return PLUGIN_CONTINUE
    }
    
    new arg3[16]
    get_msg_arg_string(3, arg3, 15)
    if(!equal(arg3, "#Game_radio")) {
        return PLUGIN_CONTINUE
        }    

    new arg5[20]
    get_msg_arg_string(5, arg5, 19)
    
    if(equal(arg5, "#Fire_in_the_hole"))
        return PLUGIN_HANDLED

    return PLUGIN_CONTINUE
}

public clcmd_buybomb(id) {
    g_abird[id] = true
    fm_give_item(id, "weapon_hegrenade")
}


public fw_EmitSound(ent,channel,const sound[])
{
    if(!pev_valid(ent))
        return FMRES_IGNORED;
        
    if(!g_abird[pev(ent, pev_owner)])
        return FMRES_IGNORED;
        
    if(fm_get_grenade_type(ent) == CSW_HEGRENADE)    
        return FMRES_IGNORED;
    
    for(new a; a < sizeof g_bouncelist;a++)
    {
        if(equali(sound,g_bouncelist[a]))
        {
            emit_sound(ent, CHAN_STREAM, sound_bounce, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
            return FMRES_SUPERCEDE
        }
        if(equali(sound, g_bounce2))
            return FMRES_SUPERCEDE;
    }
    return FMRES_IGNORED
}

public fw_ThinkGrenade(entity)
{
    if(!g_abird[pev(entity, pev_owner)])
        return HAM_IGNORED;
    
    static Float:dmgtime
    pev(entity, pev_dmgtime, dmgtime)
    
    if (dmgtime > get_gametime())
        return HAM_IGNORED;
            
    if(pev(entity, pev_flTimeStepSound) == NADE_TYPE_ABIRD)
    {
        set_pev(entity, pev_dmgtime, get_gametime() + 0.5) 
        g_abird[pev(entity, pev_owner)] = false
        set_task(0.1, "start_effect", entity)
    }
    
    return HAM_SUPERCEDE
}

public start_effect(ent)
{
    if(!pev_valid(ent))
        return;
        
    ring_effect(ent)
    //emit_sound(ent, CHAN_STREAM, sound_beep, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
    
    set_task(1.30, "effect_2", ent)
}

public effect_2(ent)
{
    if(!pev_valid(ent))
        return;
        
    ring_effect(ent)
   // emit_sound(ent, CHAN_STREAM, sound_beep, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
    
    set_task(1.0, "effect_3", ent)
}

public effect_3(ent)
{
    if(!pev_valid(ent))
        return;
        
    ring_effect(ent)
    //emit_sound(ent, CHAN_STREAM, sound_beep, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
    
    set_task(0.50, "effect_end", ent)
}

public effect_end(ent)
{
    if(!pev_valid(ent))
        return;
        
    ring_effect(ent)
    //emit_sound(ent, CHAN_STREAM, sound_beep, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
    set_task(0.50, "effect_explosion", ent)
}

public effect_explosion(ent)
{
    if(!pev_valid(ent))
        return;
        
    static victim, owner
    victim = -1
    
    new Float:originF[3]
    pev(ent, pev_origin, originF)
    
    while ((victim = engfunc(EngFunc_FindEntityInSphere, victim, originF, 240.0)) != 0)
    {
        owner = pev(ent, pev_owner)
        
        if (!is_user_connected(victim) || !is_user_connected(owner) || (get_user_team(victim) == get_user_team(owner) || (victim = owner)) )
            continue;
        
        create_damage(ent, victim, owner, 30)
    }
    
    engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, originF, 0)
    write_byte(TE_EXPLOSION)
    engfunc(EngFunc_WriteCoord, originF[0])
    engfunc(EngFunc_WriteCoord, originF[1])
    engfunc(EngFunc_WriteCoord, originF[2])
    write_short(g_ExpSpr)
    write_byte(40) 
    write_byte(10) 
    write_byte(0)
    message_end()
    
    FX_ParticlesSmall(originF)
    FX_ParticlesBig(originF)
    FX_Implosion(originF)
    
    engfunc(EngFunc_RemoveEntity, ent)
}

public ring_effect(ent)
{
    new Float:originF[3]
    pev(ent, pev_origin, originF)
    
    engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, originF, 0)
    write_byte(TE_BEAMCYLINDER) // TE id
    engfunc(EngFunc_WriteCoord, originF[0]) // x
    engfunc(EngFunc_WriteCoord, originF[1]) // y
    engfunc(EngFunc_WriteCoord, originF[2]) // z
    engfunc(EngFunc_WriteCoord, originF[0]) // x axis
    engfunc(EngFunc_WriteCoord, originF[1]) // y axis
    engfunc(EngFunc_WriteCoord, originF[2]+385.0) // z axis
    write_short(g_exploSpr) // sprite
    write_byte(0) // startframe
    write_byte(0) // framerate
    write_byte(4) // life
    write_byte(60) // width
    write_byte(0) // noise
    
    if(cs_get_user_team(pev(ent, pev_owner)) == CS_TEAM_T)
    {
        write_byte(255) // red
        write_byte(0) // green
        write_byte(0) // blue
    }
    else if(cs_get_user_team(pev(ent, pev_owner)) == CS_TEAM_CT)
    {
        write_byte(0) // red
        write_byte(0) // green
        write_byte(255) // blue
    }
    write_byte(200) // brightness
    write_byte(0) // speed
    message_end()
}

public create_damage(ent, victim, attacker, damage)
{
    if(!is_user_connected(victim) || !is_user_connected(attacker) || damage < 1)
        return;
        
    if(get_user_health(victim) > damage)
    {
        set_user_health(victim, get_user_health(victim) - damage)
        
        new Float:pos_ptr[3], Float:pos_ptd[3], Float:push_power = 1.0
                
        pev(ent, pev_origin, pos_ptr)
        pev(victim, pev_origin, pos_ptd)
                
        for(new i = 0; i < 3; i++)
        {
            pos_ptd[i] -= pos_ptr[i]
            pos_ptd[i] *= push_power
        }
        set_pev(victim, pev_velocity, pos_ptd)
        set_pev(victim, pev_impulse, pos_ptd)
    }
    else
    {
        ExecuteHamB(Ham_Killed, victim, attacker, 0)
        cs_set_user_money(attacker, cs_get_user_money(attacker) + reward)
    }
    
}


public fw_SetModel(entity, const model[])
{
    static Float:dmgtime
    pev(entity, pev_dmgtime, dmgtime)
    
    if (dmgtime == 0.0)
        return FMRES_IGNORED;
        
    if(!pev_valid(entity))
        return FMRES_IGNORED;
        
    if (equal(model[7], "w_he", 4))
    {
        new id = pev(entity, pev_owner)
        
        if(g_abird[id])
        {        
            set_pev(entity, pev_flTimeStepSound, NADE_TYPE_ABIRD)
            
            emit_sound(entity, CHAN_STREAM, sound_bounce2, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
            
            if(cs_get_user_team(id) == CS_TEAM_T)
                fm_set_rendering(entity, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 20)
            else if(cs_get_user_team(id) == CS_TEAM_CT)
                fm_set_rendering(entity, kRenderFxGlowShell, 0, 0, 255, kRenderNormal, 20)
            
            message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
            write_byte(TE_BEAMFOLLOW) // TE id
            write_short(entity) // entity
            write_short(g_trailSpr) // sprite
            write_byte(10) // life
            write_byte(10) // width
            
            if(cs_get_user_team(id) == CS_TEAM_T)
            {
                write_byte(255) // r
                write_byte(0) // g
                write_byte(0) // b
            }
            else if(cs_get_user_team(id) == CS_TEAM_CT)
            {
                write_byte(0) // r
                write_byte(0) // g
                write_byte(255) // b
            }
            
            write_byte(500) // brightness
            message_end()
            
            new className[33]
            pev(entity, pev_classname, className, 32)
            
            engfunc(EngFunc_SetModel, entity, w_model)
            return FMRES_SUPERCEDE
        }
    }
    
    return FMRES_IGNORED;
}

public fire_explode(ent)
{
    static Float:originF[3]
    pev(ent, pev_origin, originF)
    //create_blast(originF)
    
    engfunc(EngFunc_RemoveEntity, ent)
}

public Event_CurWeapon(id) 
{     
    new weaponID = read_data(2) 
    
    if(weaponID != CSW_HEGRENADE)
        return
        
    if(!g_abird[id])
        return;
    
    set_pev(id, pev_viewmodel2, v_model)
    set_pev(id, pev_weaponmodel2, p_model)
}

stock fm_get_grenade_type(index) 
{
        new classname[ 9 ];
        pev( index, pev_classname, classname, 8 );
        if( !equal( classname, "grenade" ) )return 0;
        
        if( get_pdata_int( index, 96 ) & (1<<8) )return CSW_C4;
        
        new bits = get_pdata_int( index, 114 );
        if( bits & (1<<0) )return CSW_HEGRENADE;
        else if( bits & (1<<1) )return CSW_SMOKEGRENADE;
        else if( !bits )return CSW_FLASHBANG;
        return 0;
}  

stock FX_ParticlesSmall(Float:origin[3])
{
    message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
    write_byte(TE_TAREXPLOSION)
    engfunc(EngFunc_WriteCoord, origin[0]) // x
    engfunc(EngFunc_WriteCoord, origin[1]) // y
    engfunc(EngFunc_WriteCoord, origin[2]) // z
    message_end()
}

stock FX_ParticlesBig(Float:origin[3])
{
    message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
    write_byte(TE_EXPLOSION2)
    engfunc(EngFunc_WriteCoord, origin[0]) // x
    engfunc(EngFunc_WriteCoord, origin[1]) // y
    engfunc(EngFunc_WriteCoord, origin[2]) // z
    write_byte(32)
    write_byte(32)
    message_end()
}

stock FX_Implosion(Float:origin[3])
{
    message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
    write_byte(TE_IMPLOSION)
    engfunc(EngFunc_WriteCoord, origin[0]) // x
    engfunc(EngFunc_WriteCoord, origin[1]) // y
    engfunc(EngFunc_WriteCoord, origin[2]) // z
    write_byte(230)
    write_byte(35)
    write_byte(50) 
    message_end()
}

stock print_chatColor(const id,const input[], any:...)
{
    new msg[191], players[32], count = 1;
    vformat(msg,190,input,3);
    replace_all(msg,190,"\g","^4");// green
    replace_all(msg,190,"\n","^1");// normal
    replace_all(msg,190,"\t","^3");// team
    
    if (id) players[0] = id; else get_players(players,count,"ch");
    for (new i=0;i<count;i++)
    if (is_user_connected(players[i]))
    {
        message_begin(MSG_ONE_UNRELIABLE,get_user_msgid("SayText"),_,players[i]);
        write_byte(players[i]);
        write_string(msg);
        message_end();
    }
} 
